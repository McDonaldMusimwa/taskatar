const passport = require("passport");
const jwt = require("jsonwebtoken");
const GoogleStrategy = require("passport-google-oauth2").Strategy;
require("dotenv").config();
const CLIENTID = process.env.GOOGLE_CLIENT_ID;
const CLIENTSECRET = process.env.GOOGLE_CLIENT_SECRET;
const JWTTOKEN = process.env.JWTTOKEN;
//from models
const Schema = require("../models/user");

passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser((id, done) => {
  Schema.OAuthUser.findById(id).then((user) => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      //OPTIONS FOR GOOGLE STRATEGY
      callbackURL: "/auth/google/redirect",
      clientID: CLIENTID,
      clientSecret: CLIENTSECRET,
    },
    (accessToken, refreshToken, profile, done) => {
      //console.log(profile);
      //passport call back function
      Schema.OAuthUser.findOne({ googleId: profile.id }).then((currentUser) => {
        if (currentUser) {
          //already in database
          //console.log("user is ", currentUser);
          // generate a token and attach it to the user object
          const token = jwt.sign({ userId: currentUser._id.toString(),email:currentUser.email }, JWTTOKEN, {
            expiresIn: "1h",
          });
          
          currentUser.token = token;

          done(null, currentUser);
        } else {
          //if not create user
          new Schema.OAuthUser({
            firstname: profile.given_name,
            lastname: profile.family_name,
            picture: profile.picture,
            email: profile.email,
            googleId: profile.id,
          })
            .save()
            .then((newUser) => {
              //console.log(`new user ${profile.displayName} is saved`);
              done(null, newUser);
              // generate a token and attach it to the user object
              const token = jwt.sign(
                { userId: newUser._id.toString(),
                   email: newUser.email },
                JWTTOKEN,
                { expiresIn: "1h" }
              );
             
              newUser.token = token;
            });
        }
      });
    }
  )
);
